/*
 * generated by Xtext 2.9.0.rc2
 */
package org.xtext.example.mydsl.validation

import java.util.ArrayList
import org.eclipse.xtext.validation.Check
import org.xtext.example.mydsl.myDsl.ChildrenProperty
import org.xtext.example.mydsl.myDsl.Component
import org.xtext.example.mydsl.myDsl.ExportsVariable
import org.xtext.example.mydsl.myDsl.Facet
import org.xtext.example.mydsl.myDsl.FacetsProperty
import org.xtext.example.mydsl.myDsl.Graph

/**
 * This class contains custom validation rules. 
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class MyDslValidator extends AbstractMyDslValidator {
	
var Names = new ArrayList<String>; //Contiendra les noms des facets et compo déclarés
var facetNames = new ArrayList<String>; //Contiendra les noms des facets et compo déclarés

@Check(FAST) 
def checkUndeclaredFacets(Graph g) 
{
	for (f : g.eAllContents.filter(Facet).toIterable)
	{
		facetNames.add(f.name);
	}
	for(c : g.eAllContents.filter(Component).toIterable)
	{
		var cp = c.properties;
		for (ittt : cp.optionalProperties) 
		{
			for (it : ittt.eAllContents.filter(FacetsProperty).toIterable) 
			{
				var subName = it.facetsNames.toString.substring(1,it.facetsNames.toString.length()-1);
				var subNames = new ArrayList<String>;
			  	var iterator = 0;
			  	var nbNames = 0;
			  	var name = "";
			  	var separator = ",";
			  	var space = " "; 
			  	while(iterator != subName.length)
			  	{
			  		if(subName.toString.charAt(iterator).equals(separator.toString.charAt(0)))
			  		{
			  			subNames.add(name);
			  			name="";
			  			nbNames++;
			  		}
			  		else if(subName.toString.charAt(iterator).equals(space.toString.charAt(0)))
			  		{
			  		}
			  		else
			  		{
			  			name=name+subName.toString.charAt(iterator).toString;
			  		}
			  		iterator++;
			  	}
			  	subNames.add(name);
			  	for(itt : subNames)
			  	{
			  		if(!facetNames.contains(itt))
			  		{
			  			error(it.facetsNames.toString+" not declared previoulsy",it,null);
			  		}
			  	}
			}
			
		}
	}
}

@Check(FAST)
def checkUniqueComponent(Graph g)
 {
	var compoNames = new ArrayList<String>; //Contiendra les noms des components déclarés
	for (c : g.eAllContents.filter(Component).toIterable)
	{
		if(compoNames.contains(c.name))
		{
			error(c.name+" declared twice in graph",c,null);
		}
		compoNames.add(c.name);
	}
 }
 
 @Check(FAST)
def checkUniqueFacet(Graph g)
 {
	var facetNames = new ArrayList<String>; //Contiendra les noms des facets déclarés
	for (f : g.eAllContents.filter(Facet).toIterable)
	{
		if(facetNames.contains(f.name))
		{
			error(f.name+" declared twice in graph",f,null);
		}
		facetNames.add(f.name);
	}
 }

@Check(FAST)
def checkUniqueChildren(Graph g)
{
	for (f : g.eAllContents.filter(Facet).toIterable)
	{
		var facetChildrenNames = new ArrayList<String>; //Contiendra les noms des children de facets déclarés
		for(c : f.eAllContents.filter(ChildrenProperty).toIterable)
		{
			for(n : c.name)
			{
				if(facetChildrenNames.contains(n))
				{
					error(n+" used twice in same facet",c,null);
				}
				facetChildrenNames.add(n);
			}
		}
	}
	for (c : g.eAllContents.filter(Component).toIterable)
	{
		var componentChildrenNames = new ArrayList<String>; //Contiendra les noms des children de components déclarés
		for(ch : c.eAllContents.filter(ChildrenProperty).toIterable)
		{
			for(n : ch.name)
			{
				if(componentChildrenNames.contains(n))
				{
					error(n+" used twice in same component",ch,null);
				}
				componentChildrenNames.add(n);
			}
		}
	}
}

@Check(FAST)
def checkUniqueExport(Graph g)
{
	for (f : g.eAllContents.filter(Facet).toIterable)
	{
		var facetExportNames = new ArrayList<String>; //Contiendra les noms des children de facets déclarés
		for(e : f.eAllContents.filter(ExportsVariable).toIterable)
		{
			if(facetExportNames.contains(e.name))
			{
				error(e.name+" used twice in same facet",e,null);
			}
			facetExportNames.add(e.name);
		}
	}
	for (c : g.eAllContents.filter(Component).toIterable)
	{
		var componentExportNames = new ArrayList<String>; //Contiendra les noms des children de components déclarés
		for(e : c.eAllContents.filter(ExportsVariable).toIterable)
		{
			if(componentExportNames.contains(e.name))
			{
				error(e.name+" used twice in same component",e,null);
			}
			componentExportNames.add(e.name);
		}
	}
}

@Check(FAST)
def checkUndeclaredChildren(Graph g)
{
	for(c : g.eAllContents.filter(Component).toIterable)
	{
		if(!Names.contains(c.name))
		{
			Names.add(c.name);
		}
	}
	for (f : g.eAllContents.filter(Facet).toIterable)
	{
		for(c : f.eAllContents.filter(ChildrenProperty).toIterable)
		{
			for(n : c.name)
			{
				if(!Names.contains(n))
				{
					error(n+" undeclared",c,null);
				}
			}
		}
	}
	for (c : g.eAllContents.filter(Component).toIterable)
	{
		for(ch : c.eAllContents.filter(ChildrenProperty).toIterable)
		{
			for(n : ch.name)
			{
				if(!Names.contains(n))
				{
					error(n+" undeclared",c,null);
				}
			}
		}
	}
}

@Check(FAST) //Je ne suis pas si sûr de celle-ci
def checkUndeclaredExport(Graph g)
{
	for(f : g.eAllContents.filter(Facet).toIterable)
	{
		if(!Names.contains(f.name))
		{
			Names.add(f.name);
		}
	}
	for(c : g.eAllContents.filter(Component).toIterable)
	{
		if(!Names.contains(c.name))
		{
			Names.add(c.name);
		}
	}
	for (f : g.eAllContents.filter(Facet).toIterable)
	{
		for(ev : f.eAllContents.filter(ExportsVariable).toIterable)
		{
			if(!Names.contains(ev.name))
			{
				error(ev.name+" undeclared",ev,null);
			}
		}
	}
	for (c : g.eAllContents.filter(Component).toIterable)
	{
		for(ev : c.eAllContents.filter(ExportsVariable).toIterable)
		{
			if(!Names.contains(ev.name))
			{
				error(ev.name+" undeclared",ev,null);
			}
		}
	}
}

// check instanceOf name unique YASS
// check toutes les variables d'instanceOf uniques LOIC
// check instanceOf de component existant YASS
// check les variables de instanceOf existent dans le component YASS
// check imports (class et prop existent) LOIC (done)
// check extend existent LOIC

	def getComponentByName(Graph g, String componentName)
	{
		for (Component c : g.components)
		{
			if (c.name.equals(componentName)) return c;
		}
		return null;
	}
	
	def isComponentExportVariableExists(Component c, String exportVariableName)
	{
		for (OptionalComponentProperty ocp : c.properties.optionalProperties)
		{
			if (ocp.exportsProperty != null)
			{
				for (ExportsVariable v : ocp.exportsProperty.exportsVariables)
				{
					if (v.name.equals(exportVariableName))
					{
						return true;
					}
				}
			}
		}
		return false;
	}
	
	@Check(FAST)
	def checkValidImportsProperty(Graph g)
	{
		for (Component c : g.components)
		{
			for (OptionalComponentProperty ocp : c.properties.optionalProperties)
			{
				if (ocp.importsProperty != null)
				{
					for (ImportsVariable v : ocp.importsProperty.importsVariables)
					{
						if (!v.isIsExternal)
						{
							var cc = getComponentByName(g, v.componentName);
							if (cc == null)
							{
								error("component " + v.componentName + " does not exist", v, null);
							}
							if (!isComponentExportVariableExists(cc, v.componentProperty))
							{
								error("component " + cc.name + " does not export the variable " + v.componentProperty, v, null);
							}
						}
					}
				}
			}
		}
	}

	@Check(FAST)
def checkUniqueInstances(Graph g)
{
	var instanceNames = new ArrayList<String>; //Contiendra les noms des facets déclarés
	for (i : g.eAllContents.filter(NameProperty).toIterable)
	{
		if(instanceNames.contains(i.name))
		{
			error(i.name+" declared twice in graph",i,null);
		}
		instanceNames.add(i.name);
	}
}

@Check(FAST)
def checkUndeclaredInstance(Graph g)
{
	for(c : g.eAllContents.filter(Component).toIterable)
	{
		if(!componentNames.contains(c.name))
		{
			componentNames.add(c.name);
		}
	}
	for (i : g.eAllContents.filter(Instance).toIterable)
	{
		if(!componentNames.contains(i.name))
		{
			error(i.name+" undeclared",i,null);
		}
	}
}

@Check(FAST)
def checkUndeclaredVariableInstance(Graph g)
{

	for(it : g.eAllContents.filter(Instance).toIterable)
	{
		var currCompo = getComponentByName(g,it.name);
		System.out.println("Current instanceOf "+it.name);
		for(itt : it.eAllContents.filter(ExportedVariablesProperty).toIterable)
		{
			System.out.println("Current variable "+itt.name);
			if(!isComponentExportVariableExists(currCompo, itt.name))
			{
				error(itt.name+" undeclared in the component "+currCompo.name,itt,null);
			}
		}
	}
	
}

	
	@Check(FAST)
	def checkInstanceOfVariableExists(Instance i)
	{
		val names = new HashSet<String>();
		for (OptionalInstanceProperty ip : i.properties.optionalProperties)
		{
			if (ip.exportedVariablesProperty != null)
			{
				if (names.contains(ip.exportedVariablesProperty.name))
				{
					error("property defined more than once", ip.exportedVariablesProperty, null);
				}
				names.add(ip.exportedVariablesProperty.name);
			}
		}	
	}
	

}
