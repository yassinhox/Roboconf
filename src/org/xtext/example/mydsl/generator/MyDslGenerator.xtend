/*
 * generated by Xtext 2.9.0.rc2
 */
package org.xtext.example.mydsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.example.mydsl.myDsl.*

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MyDslGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		fsa.generateFile('greetings.txt', '''
		«var x = 0»
		<!DOCTYPE html>
		<html>
		
		    <head>
		        <link rel="stylesheet" href="joint.css" />
		        <script type="text/javascript" src="jquery.min.js"></script>
		        <script type="text/javascript" src="lodash.min.js"></script>
		        <script type="text/javascript" src="backbone-min.js"></script>
		        <script type="text/javascript" src="joint.js"></script>
		    </head>
		
		    <body>
		      <div id="myholder"></div>
		      <script type="text/javascript">
		
		        var graph = new joint.dia.Graph;
		
		        var paper = new joint.dia.Paper
		        ({
		            el: $('#myholder'),
		            width: 1600,
		            height: 1600,
		            model: graph,
		            gridSize: 1
		        });
      «FOR compo : resource.getAllContents.filter(Component).toIterable»
      var rect«x» = new joint.shapes.basic.Rect
      ({
          position: { x: 100, y: 30 },
          size: { width: 100, height: 30 },
          attrs: { rect: { fill: 'red' }, text: { text: '«compo.name»', fill: 'white' } }
      });
      «System.out.println(compo)»
      «var y = x»
      «var xAxis = 100»
      «var yAxis = 130»
      	«FOR compoProp : compo.eAllContents.filter(InstallerProperty).toIterable»
      		«x = x+1»
      		var rect«x» = new joint.shapes.basic.Rect
      		({
                position: { x: «xAxis», y: «yAxis» },
                size: { width: 100, height: 30 },
                attrs: { rect: { fill: 'blue' }, text: { text: '«compoProp.name»', fill: 'white' } }
            });
      		var link = new joint.dia.Link
      		({
	            source: { id: rect«y».id },
	            target: { id: rect«x».id }
	        });
      		graph.addCells([rect«y», rect«x», link]); 
      		«xAxis = xAxis+250»
      		«System.out.println(compoProp)»
      	«ENDFOR»
      	«FOR compoProp : compo.eAllContents.filter(ChildrenProperty).toIterable»
      		«x = x+1»
      		var rect«x» = new joint.shapes.basic.Rect
      		({
    		    position: { x: «xAxis», y: «yAxis» },
                size: { width: 100, height: 30 },
                attrs: { rect: { fill: 'blue' }, text: { text: '«compoProp.name»', fill: 'white' } }
            });
      		var link = new joint.dia.Link
      		({
	            source: { id: rect«y».id },
	            target: { id: rect«x».id }
	        });
      		graph.addCells([rect«y», rect«x», link]);
      		«xAxis = xAxis+250»
      		«System.out.println(compoProp)»
      	«ENDFOR»
      	«FOR compoProp : compo.eAllContents.filter(ExportsVariable).toIterable»
      		«x = x+1»
      		var rect«x» = new joint.shapes.basic.Rect
      		({
			    position: { x: «xAxis», y: «yAxis» },
                size: { width: 100, height: 30 },
                attrs: { rect: { fill: 'blue' }, text: { text: '«compoProp.name»', fill: 'white' } }
            });
      		var link = new joint.dia.Link
      		({
	            source: { id: rect«y».id },
	            target: { id: rect«x».id }
	        });
      		graph.addCells([rect«y», rect«x», link]);
      		«xAxis = xAxis+250»
      		«System.out.println(compoProp)»
      	«ENDFOR»
      	«FOR compoProp : compo.eAllContents.filter(ImportsVariable).toIterable»
      		«x = x+1»
      		var rect«x» = new joint.shapes.basic.Rect
      		({
	  		    position: { x: «xAxis», y: «yAxis» },
	            size: { width: 100, height: 30 },
	            attrs: { rect: { fill: 'blue' }, text: { text: '«compoProp.componentName»', fill: 'white' } }
	        });
      		var link = new joint.dia.Link
      		({
	            source: { id: rect«y».id },
	            target: { id: rect«x».id }
	        });
      		graph.addCells([rect«y», rect«x», link]);
      		«xAxis = xAxis+250»
			«System.out.println(compoProp)»
      	«ENDFOR»
      	«FOR compoProp : compo.eAllContents.filter(FacetList).toIterable»
      		«x = x+1»
	  		var rect«x» = new joint.shapes.basic.Rect
	  		({
  	   	        position: { x: «xAxis», y: «yAxis» },
                size: { width: 100, height: 30 },
                attrs: { rect: { fill: 'blue' }, text: { text: '«compoProp.name»', fill: 'white' } }
            });
	  		var link = new joint.dia.Link
	  		({
	            source: { id: rect«y».id },
	            target: { id: rect«x».id }
	        });
	  		graph.addCells([rect«y», rect«x», link]);
	  		«xAxis = xAxis+250»
	  	    «System.out.println(compoProp)»
      	«ENDFOR»
      	«FOR compoProp : compo.eAllContents.filter(ExtendsProperty).toIterable»
      		«x = x+1»
	  		var rect«x» = new joint.shapes.basic.Rect
	  		({
    		    position: { x: «xAxis», y: «yAxis» },
                size: { width: 100, height: 30 },
                attrs: { rect: { fill: 'blue' }, text: { text: '«compoProp.extendsNames»', fill: 'white' } }
            });
	  		var link = new joint.dia.Link
	  		({
	            source: { id: rect«y».id },
				target: { id: rect«x».id }
	        });
	  		graph.addCells([rect«y», rect«x», link]);
	  		«xAxis = xAxis+250»
	  	    «System.out.println(compoProp)»
      	«ENDFOR»
      «ENDFOR»
            </script>
          </body>
      </html>
    ''')
	}
}
