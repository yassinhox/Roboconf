/*
 * generated by Xtext 2.9.0.rc2
 */
package org.xtext.example.mydsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.example.mydsl.air.ChildrenProperty
import org.xtext.example.mydsl.air.Component
import org.xtext.example.mydsl.air.ExportsVariable
import org.xtext.example.mydsl.air.ExtendsProperty
import org.xtext.example.mydsl.air.FacetList
import org.xtext.example.mydsl.air.ImportsVariable
import org.xtext.example.mydsl.air.InstallerProperty
import org.xtext.example.mydsl.air.Facet
import org.xtext.example.mydsl.air.ExportsProperty

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class AirGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		fsa.generateFile('graph.html', '''
			«var x = 0»
			«var posX = 0»
			«var posY = 0»
			«var xAxis = 100»
			«var wid = 260»
			«var widd = 180»
			«var hei = 30»
			«var yAxis = 30»
			<!DOCTYPE html>
			<html>
			
			    <head>
			        <link rel="stylesheet" href="http://www.jointjs.com/downloads/joint.css" />
			        <script type="text/javascript" src="http://jointjs.com/js/vendor/jquery/jquery.min.js"></script>
			        <script type="text/javascript" src="http://jointjs.com/js/vendor/lodash/lodash.min.js"></script>
			        <script type="text/javascript" src="http://jointjs.com/js/vendor/backbone/backbone-min.js"></script>
			        <script type="text/javascript" src="http://www.jointjs.com/downloads/joint.js"></script>
					<script type="text/javascript" src="http://jointjs.com/js/rappid/v1.7/rappid.min.js"></script>
					<script type="text/javascript" src="http://jointjs.com/js/vendor/graphlib/dist/graphlib.core.js"></script>
					<script type="text/javascript" src="http://jointjs.com/js/vendor/dagre/dist/dagre.core.js"></script>
					<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jointjs/0.9.7/joint.layout.DirectedGraph.min.js"></script>
			    </head>
			
			    <body>
			      <div id="paper"></div>
			      <script type="text/javascript">
			
			        var graph = new joint.dia.Graph;
			
			        var paper = new joint.dia.Paper
			        ({
			            //el: $('#myholder'),
			            width: 1600,
			            height: 1600,
			            model: graph,
			            gridSize: 1
			        });
				var paperScroller = new joint.ui.PaperScroller({
				    paper: paper,
				    autoResizePaper: true
				});

				paper.on('blank:pointerdown', paperScroller.startPanning);
				paperScroller.$el.css({ width: '100%', height: '100%' }).appendTo('#paper');

					var rect00 = new joint.shapes.basic.Rect
					({
			    	    //position: { x: 100, y: 30 },
			    	    size: { width: 100, height: 30 },
			    	    attrs: { rect: { fill: '#2C3E50', rx: 5, ry: 5, 'stroke-width': 2, stroke: 'black' }, 
			    	    text: { 
			    	    	text: 'Model', fill: 'white',
			    	            'font-size': 18, 'font-weight': 'bold', 'font-variant': 'small-caps', 'text-transform': 'capitalize'
			    	    } }
			    	});

				«FOR facet : resource.getAllContents.filter(Facet).toIterable»
					var rect«x» = new joint.shapes.basic.Rect
					({
			    	    //position: { x: «xAxis», y: «yAxis» },
			    	    size: { width: «widd», height: «hei» },
			    	    attrs: { rect: { fill: '#74D0F1', rx: 5, ry: 5, 'stroke-width': 2, stroke: 'black' }, text: { text: '«facet.name»', fill: 'white', 'font-size': 18, 'font-weight': 'bold' } }
			    	});
			    			var link = new joint.dia.Link
			    			({
							 router: { name: 'manhattan' },
			    			     source: { id: rect00.id },
			    			     target: { id: rect«x».id }
			    			});
			    			graph.addCells([rect00, rect«x», link]); 
			    	«System.out.println(facet)»
			    	«var y = x»
			    	«xAxis = 100»
			    	«yAxis = yAxis + 30»
			    		«FOR facetProp : facet.eAllContents.filter(ChildrenProperty).toIterable»
			    			«x = x+1»
			    			var rect«x» = new joint.shapes.basic.Rect
			    			({
			    			        //position: { x: «xAxis», y: «yAxis» },
							size: { width: «wid», height: «hei» },
			    			        attrs: { rect: { fill: '#9683EC', rx: 5, ry: 5, 'stroke-width': 2, stroke: 'black' }, text: { text: '«facetProp.name»', fill: 'white', 'font-size': 12, 'font-weight': 'bold' } }
			    			});
			    			var link = new joint.dia.Link
			    			({
							 router: { name: 'manhattan' },
			    			     source: { id: rect«y».id },
			    			     target: { id: rect«x».id }
			    			});
			    			graph.addCells([rect«y», rect«x», link]); 
			    			«xAxis = xAxis+250»
			    			«System.out.println(facetProp)»
			    		«ENDFOR»
			    		«FOR facetProp : facet.eAllContents.filter(ExportsVariable).toIterable»
			    			«x = x+1»
			    			var rect«x» = new joint.shapes.basic.Rect
			    			({
			    			//position: { x: «xAxis», y: «yAxis» },
							size: { width: «wid», height: «hei» },
			    			         attrs: { rect: { fill: '#9683EC', rx: 5, ry: 5, 'stroke-width': 2, stroke: 'black' }, text: { text: '«facetProp.name»', fill: 'white', 'font-size': 12, 'font-weight': 'bold' } }
			    			});
			    			var link = new joint.dia.Link
			    			({
							 router: { name: 'manhattan' },
			    			     source: { id: rect«y».id },
			    			     target: { id: rect«x».id }
			    			});
			    			graph.addCells([rect«y», rect«x», link]);
			    			«xAxis = xAxis+250»
			    			«System.out.println(facetProp)»
			    		«ENDFOR»
					«posX = xAxis»
					«posY = yAxis»
				«ENDFOR»

				«FOR compo : resource.getAllContents.filter(Component).toIterable»
			    		«x = x+1»
					var rect«x» = new joint.shapes.basic.Rect
					({
			    	    //position: { x: «posX», y: «posY» },
							size: { width: «widd», height: «hei» },
			    	    attrs: { rect: { fill: '#FF5E4D', rx: 5, ry: 5, 'stroke-width': 2, stroke: 'black'}, text: { text: '«compo.name»', fill: 'white', 'font-size': 18, 'font-weight': 'bold' } }
			    	});
			    			var link = new joint.dia.Link
			    			({
							 router: { name: 'manhattan' },
			    			     source: { id: rect00.id },
			    			     target: { id: rect«x».id }
			    			});
			    			graph.addCells([rect00, rect«x», link]); 
			    	«System.out.println(compo)»
			    	«var y = x»
			    	«xAxis = posX+250»
			    	«yAxis = posY+100»
			    		«FOR compoProp : compo.eAllContents.filter(InstallerProperty).toIterable»
			    			«x = x+1»
			    			var rect«x» = new joint.shapes.basic.Rect
			    			({
			    			        //position: { x: «xAxis», y: «yAxis» },
							size: { width: «wid», height: «hei» },
			    			        attrs: { rect: { fill: '#FFCB60', rx: 5, ry: 5, 'stroke-width': 2, stroke: 'black' }, text: { text: '«compoProp.name»', fill: 'black', 'font-size': 12, 'font-weight': 'bold' } }
			    			});
			    			var link = new joint.dia.Link
			    			({
							 router: { name: 'manhattan' },
			    			     source: { id: rect«y».id },
			    			     target: { id: rect«x».id }
			    			});
			    			graph.addCells([rect«y», rect«x», link]); 
			    			«xAxis = xAxis+250»
			    			«System.out.println(compoProp)»
			    		«ENDFOR»
			    		«FOR compoProp : compo.eAllContents.filter(ChildrenProperty).toIterable»
			    			«x = x+1»
			    			var rect«x» = new joint.shapes.basic.Rect
			    			({
			    			//position: { x: «xAxis», y: «yAxis» },
							size: { width: «wid», height: «hei» },
			    			        attrs: { rect: { fill: '#FFCB60', rx: 5, ry: 5, 'stroke-width': 2, stroke: 'black' }, text: { text: '«compoProp.name»', fill: 'black', 'font-size': 12, 'font-weight': 'bold' } }
			    			});
			    			var link = new joint.dia.Link
			    			({
							 router: { name: 'manhattan' },
			    			     source: { id: rect«y».id },
			    			     target: { id: rect«x».id }
			    			});
			    			graph.addCells([rect«y», rect«x», link]);
			    			«xAxis = xAxis+250»
			    			«System.out.println(compoProp)»
			    		«ENDFOR»
			    		«FOR compoProp : compo.eAllContents.filter(ExportsVariable).toIterable»
			    			«x = x+1»
			    			var rect«x» = new joint.shapes.basic.Rect
			    			({
			    			//position: { x: «xAxis», y: «yAxis» },
							size: { width: «wid», height: «hei» },
			    			         attrs: { rect: { fill: '#FFCB60', rx: 5, ry: 5, 'stroke-width': 2, stroke: 'black' }, text: { text: '«compoProp.name»', fill: 'black', 'font-size': 12, 'font-weight': 'bold' } }
			    			});
			    			var link = new joint.dia.Link
			    			({
							 router: { name: 'manhattan' },
			    			     source: { id: rect«y».id },
			    			     target: { id: rect«x».id }
			    			});
			    			graph.addCells([rect«y», rect«x», link]);
			    			«xAxis = xAxis+250»
			    			«System.out.println(compoProp)»
			    		«ENDFOR»
			    		«FOR compoProp : compo.eAllContents.filter(ImportsVariable).toIterable»
			    			«x = x+1»
			    			var rect«x» = new joint.shapes.basic.Rect
			    			({
			    			 //position: { x: «xAxis», y: «yAxis» },
							size: { width: «wid», height: «hei» },
			    			     attrs: { rect: { fill: '#FFCB60', rx: 5, ry: 5, 'stroke-width': 2, stroke: 'black' }, text: { text: '«compoProp.componentName»', fill: 'black', 'font-size': 12, 'font-weight': 'bold' } }
			    			 });
			    			var link = new joint.dia.Link
			    			({
							 router: { name: 'manhattan' },
			    			     source: { id: rect«y».id },
			    			     target: { id: rect«x».id }
			    			});
			    			graph.addCells([rect«y», rect«x», link]);
			    			«xAxis = xAxis+250»
					«System.out.println(compoProp)»
					«ENDFOR»
					«FOR compoProp : compo.eAllContents.filter(FacetList).toIterable»
						«x = x+1»
						var rect«x» = new joint.shapes.basic.Rect
						({
						 	        //position: { x: «xAxis», y: «yAxis» },
							size: { width: «wid», height: «hei» },
						 	         attrs: { rect: { fill: '#FFCB60', rx: 5, ry: 5, 'stroke-width': 2, stroke: 'black' }, text: { text: '«compoProp.name»', fill: 'black', 'font-size': 12, 'font-weight': 'bold' } }
						});
						var link = new joint.dia.Link
						({
							 router: { name: 'manhattan' },
						        source: { id: rect«y».id },
						        target: { id: rect«x».id }
						});
						graph.addCells([rect«y», rect«x», link]);
						«xAxis = xAxis+250»
						   «System.out.println(compoProp)»
					«ENDFOR»
					«FOR compoProp : compo.eAllContents.filter(ExtendsProperty).toIterable»
						«x = x+1»
						var rect«x» = new joint.shapes.basic.Rect
						({
							    //position: { x: «xAxis», y: «yAxis» },
							size: { width: «wid», height: «hei» },
							          attrs: { rect: { fill: '#FFCB60', rx: 5, ry: 5, 'stroke-width': 2, stroke: 'black' }, text: { text: '«compoProp.extendsNames»', fill: 'black', 'font-size': 12, 'font-weight': 'bold' } }
							      });
						var link = new joint.dia.Link
						({
							 router: { name: 'manhattan' },
						        source: { id: rect«y».id },
						target: { id: rect«x».id }
						     });
						graph.addCells([rect«y», rect«x», link]);
						«xAxis = xAxis+250»
						   «System.out.println(compoProp)»
					«ENDFOR»
					«posX = xAxis»
					«posY = yAxis»
				«ENDFOR»

	joint.layout.DirectedGraph.layout(graph, {
		 nodeSep: 50,
		     edgeSep: 80,
            //setLinkVertices: false,
			rankDir: "LR"
        });

	//paperScroller.zoom(-0.2);
	paperScroller.centerContent();
				</script>
				</body>
				</html>
			''')
	}
}
